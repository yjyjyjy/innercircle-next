generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Session       Session[]
  user_profile  user_profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model address_collection_total_worth {
  address              String?  @db.VarChar
  address_rank         BigInt?
  contract             String?  @db.VarChar
  num_tokens           BigInt?
  floor_price_in_eth   Decimal? @db.Decimal
  collection_worth     Decimal? @db.Decimal
  rnk                  BigInt?
  total_worth          Decimal? @db.Decimal
  collection_pct_total Decimal? @db.Decimal

  @@index([address], map: "address_collection_total_worth_idx_address")
  @@ignore
}

model address_metadata {
  id                       String    @id @db.VarChar
  public_name_tag          String?   @db.VarChar
  is_contract              Boolean?
  is_special_address       Boolean?
  special_address_type     String?   @db.VarChar
  opensea_display_name     String?   @db.VarChar
  opensea_image_url        String?   @db.VarChar
  opensea_banner_image_url String?   @db.VarChar
  opensea_bio              String?   @db.VarChar
  ens                      String?   @db.VarChar
  twitter_username         String?   @db.VarChar
  instagram_username       String?   @db.VarChar
  medium_username          String?   @db.VarChar
  email                    String?   @db.VarChar
  website                  String?   @db.VarChar
  opensea_user_created_at  DateTime? @db.Timestamp(6)
  last_updated_at          DateTime? @db.Timestamp(6)
  twitter_username_verifed Boolean?
  twitter_follower         String?   @db.VarChar
  discord_username         String?   @db.VarChar

  @@index([email], map: "address_metadata_idx_email")
  @@index([is_contract], map: "address_metadata_idx_is_contract")
  @@index([is_special_address], map: "address_metadata_idx_is_special_address")
}

model address_metadata_opensea {
  id                       String    @id @db.VarChar
  opensea_display_name     String?   @db.VarChar
  opensea_image_url        String?   @db.VarChar
  opensea_banner_image_url String?   @db.VarChar
  opensea_bio              String?   @db.VarChar
  twitter_username         String?   @db.VarChar
  instagram_username       String?   @db.VarChar
  website                  String?   @db.VarChar
  opensea_user_created_at  DateTime? @db.Timestamp(6)
  last_updated_at          DateTime? @db.Timestamp(6)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model address_social {
  address          String?   @db.VarChar(100)
  platform         String?   @db.VarChar(100)
  username         String?   @db.VarChar
  followers        Int?
  verified_linkage Boolean?
  real_account     Boolean?
  last_verified_at DateTime? @db.Timestamp(6)

  @@unique([address, platform, username], map: "social_account_unqiue_idx")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model bkp_2022_6_8_user_prfile {
  id                                      Int?
  handle                                  String?  @db.VarChar
  profile_name                            String?  @db.VarChar
  profile_picture                         String?  @db.VarChar
  email                                   String?  @db.VarChar
  twitter                                 String?  @db.VarChar
  linkedin                                String?  @db.VarChar
  bio_short                               String?  @db.VarChar
  bio                                     String?  @db.VarChar
  label_hiring                            Boolean?
  label_open_to_work                      Boolean?
  label_open_to_cofounder_matching        Boolean?
  label_need_product_feedback             Boolean?
  label_open_to_discover_new_project      Boolean?
  label_fundraising                       Boolean?
  label_open_to_invest                    Boolean?
  label_on_core_team                      Boolean?
  label_text_hiring                       String?  @db.VarChar
  label_text_open_to_work                 String?  @db.VarChar
  label_text_open_to_discover_new_project String?  @db.VarChar
  skill_founder                           Boolean?
  skill_web3_domain_expert                Boolean?
  skill_artist                            Boolean?
  skill_frontend_eng                      Boolean?
  skill_backend_eng                       Boolean?
  skill_fullstack_eng                     Boolean?
  skill_blockchain_eng                    Boolean?
  skill_data_eng                          Boolean?
  skill_data_science                      Boolean?
  skill_hareware_dev                      Boolean?
  skill_game_dev                          Boolean?
  skill_dev_ops                           Boolean?
  skill_product_manager                   Boolean?
  skill_product_designer                  Boolean?
  skill_token_designer                    Boolean?
  skill_technical_writer                  Boolean?
  skill_social_media_influencer           Boolean?
  skill_i_bring_capital                   Boolean?
  skill_community_manager                 Boolean?
  skill_marketing_growth                  Boolean?
  skill_business_development              Boolean?
  skill_developer_relations               Boolean?
  skill_influencer_relations              Boolean?
  skill_investor_relations                Boolean?
  resume                                  String?  @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model bkp_address_metadata_2022_04_05 {
  id                       String?   @db.VarChar
  public_name_tag          String?   @db.VarChar
  is_contract              Boolean?
  is_special_address       Boolean?
  special_address_type     String?   @db.VarChar
  opensea_display_name     String?   @db.VarChar
  opensea_image_url        String?   @db.VarChar
  opensea_banner_image_url String?   @db.VarChar
  opensea_bio              String?   @db.VarChar
  ens                      String?   @db.VarChar
  twitter_username         String?   @db.VarChar
  instagram_username       String?   @db.VarChar
  medium_username          String?   @db.VarChar
  email                    String?   @db.VarChar
  website                  String?   @db.VarChar
  opensea_user_created_at  DateTime? @db.Timestamp(6)
  last_updated_at          DateTime? @db.Timestamp(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model bkp_address_metadata_2022_04_15 {
  id                       String?   @db.VarChar
  public_name_tag          String?   @db.VarChar
  is_contract              Boolean?
  is_special_address       Boolean?
  special_address_type     String?   @db.VarChar
  opensea_display_name     String?   @db.VarChar
  opensea_image_url        String?   @db.VarChar
  opensea_banner_image_url String?   @db.VarChar
  opensea_bio              String?   @db.VarChar
  ens                      String?   @db.VarChar
  twitter_username         String?   @db.VarChar
  instagram_username       String?   @db.VarChar
  medium_username          String?   @db.VarChar
  email                    String?   @db.VarChar
  website                  String?   @db.VarChar
  opensea_user_created_at  DateTime? @db.Timestamp(6)
  last_updated_at          DateTime? @db.Timestamp(6)
  twitter_username_verifed Boolean?
  twitter_follower         String?   @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model bkp_collection_2022_03_21 {
  id                      String?   @db.VarChar
  name                    String?   @db.VarChar
  safelist_request_status String?   @db.VarChar
  description             String?   @db.VarChar
  image_url               String?   @db.VarChar
  banner_image_url        String?   @db.VarChar
  external_url            String?   @db.VarChar
  twitter_username        String?   @db.VarChar
  discord_url             String?   @db.VarChar
  telegram_url            String?   @db.VarChar
  instagram_username      String?   @db.VarChar
  medium_username         String?   @db.VarChar
  wiki_url                String?   @db.VarChar
  payout_address          String?   @db.VarChar
  slug                    String?   @db.VarChar
  last_updated_at         DateTime? @db.Timestamp(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model bkp_collection_to_circle_mapping_mar_18_2022 {
  collection_id String?   @db.VarChar
  circle_id     Int?
  created_at    DateTime? @db.Date

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model bkp_post_2022_03_18 {
  id            Int?
  collection_id String?   @db.VarChar
  created_at    DateTime? @db.Date

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model cet_buy {
  address            String?   @db.VarChar
  date               DateTime? @db.Date
  contract           String?   @db.VarChar
  token_id           String?   @db.VarChar
  floor_price_in_eth Decimal?  @db.Decimal
  price_per_token    Decimal?  @db.Decimal

  @@index([address, contract, token_id], map: "buy_idx_address_contract_token_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model cet_sell {
  address            String?   @db.VarChar
  date               DateTime? @db.Date
  contract           String?   @db.VarChar
  token_id           String?   @db.VarChar
  floor_price_in_eth Decimal?  @db.Decimal
  price_per_token    Decimal?  @db.Decimal

  @@index([address, contract, token_id], map: "sell_idx_address_contract_token_id")
  @@ignore
}

model circle {
  id                           Int                            @id @default(autoincrement())
  name                         String                         @db.VarChar
  collection_to_circle_mapping collection_to_circle_mapping[]
  insider_to_circle_mapping    insider_to_circle_mapping[]
}

model collection {
  id                               String                             @id @db.VarChar
  name                             String                             @db.VarChar
  safelist_request_status          String?                            @db.VarChar
  description                      String?                            @db.VarChar
  image_url                        String?                            @db.VarChar
  banner_image_url                 String?                            @db.VarChar
  external_url                     String?                            @db.VarChar
  twitter_username                 String?                            @db.VarChar
  discord_url                      String?                            @db.VarChar
  telegram_url                     String?                            @db.VarChar
  instagram_username               String?                            @db.VarChar
  medium_username                  String?                            @db.VarChar
  wiki_url                         String?                            @db.VarChar
  payout_address                   String?                            @db.VarChar
  slug                             String?                            @db.VarChar
  last_updated_at                  DateTime?                          @db.Timestamp(6)
  collection_similarity            collection_similarity[]            @ignore
  collection_tag                   collection_tag[]                   @ignore
  collection_to_circle_mapping     collection_to_circle_mapping[]
  insider_collection_ownership     insider_collection_ownership[]
  insider_past_90_days_trading_roi insider_past_90_days_trading_roi[]
  insider_portfolio                insider_portfolio[]
  insight                          insight[]
  insight_trx                      insight_trx[]
  nft_ownership                    nft_ownership[]
  post                             post[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model collection_similarity {
  collection_id             String?     @db.VarChar(100)
  counterpart_collection_id String?     @db.VarChar(100)
  similarity                Decimal?    @db.Decimal
  collection                collection? @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([collection_id, counterpart_collection_id], map: "collection_similarity_unique_idx_collection_id_counterpart_coll")
  @@index([collection_id], map: "collection_similarity_idx_collection_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model collection_tag {
  collection_id String?     @db.VarChar(100)
  tag           String?     @db.VarChar(500)
  collection    collection? @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([collection_id, tag], map: "collection_tag_unique_idx_collection_id_tag")
  @@ignore
}

model collection_to_circle_mapping {
  collection_id String     @db.VarChar
  circle_id     Int
  started_at    DateTime   @db.Date
  circle        circle     @relation(fields: [circle_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  collection    collection @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([collection_id, circle_id], map: "collection_to_circle_mapping_unique_idx_collection_circle")
}

model conference {
  id                                 Int                                  @id @default(autoincrement())
  year                               Int
  conference_name                    String                               @db.VarChar
  location                           String?                              @db.VarChar
  start_date                         DateTime?                            @db.Date
  end_date                           DateTime?                            @db.Date
  website                            String?                              @db.VarChar
  user_profile_to_conference_mapping user_profile_to_conference_mapping[]

  @@unique([year, conference_name], map: "conference_idx_conference_name_year")
}

model eth_contracts {
  address   String    @id @db.VarChar
  is_erc20  Boolean?
  is_erc721 Boolean?
  is_nft    Boolean?
  timestamp DateTime? @db.Timestamp(6)

  @@index([address], map: "eth_contracts_idx_address")
  @@index([is_nft], map: "eth_contracts_idx_is_nft")
  @@index([timestamp], map: "eth_contracts_idx_timestamp")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model eth_token_transfers_2018 {
  timestamp         DateTime? @db.Timestamp(6)
  trx_hash          String?   @db.VarChar
  contract          String?   @db.VarChar
  from_address      String?   @db.VarChar
  to_address        String?   @db.VarChar
  token_id_or_value String?   @db.VarChar

  @@index([contract], map: "eth_token_transfers_2018_idx_contract")
  @@index([timestamp], map: "eth_token_transfers_2018_idx_timestamp")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model eth_token_transfers_2019 {
  timestamp         DateTime? @db.Timestamp(6)
  trx_hash          String?   @db.VarChar
  contract          String?   @db.VarChar
  from_address      String?   @db.VarChar
  to_address        String?   @db.VarChar
  token_id_or_value String?   @db.VarChar

  @@index([contract], map: "eth_token_transfers_2019_idx_contract")
  @@index([timestamp], map: "eth_token_transfers_2019_idx_timestamp")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model eth_token_transfers_2020 {
  timestamp         DateTime? @db.Timestamp(6)
  trx_hash          String?   @db.VarChar
  contract          String?   @db.VarChar
  from_address      String?   @db.VarChar
  to_address        String?   @db.VarChar
  token_id_or_value String?   @db.VarChar

  @@index([contract], map: "eth_token_transfers_2020_idx_contract")
  @@index([timestamp], map: "eth_token_transfers_2020_idx_timestamp")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model eth_token_transfers_2021 {
  timestamp         DateTime? @db.Timestamp(6)
  trx_hash          String?   @db.VarChar
  contract          String?   @db.VarChar
  from_address      String?   @db.VarChar
  to_address        String?   @db.VarChar
  token_id_or_value String?   @db.VarChar

  @@index([contract], map: "eth_token_transfers_2021_idx_contract")
  @@index([timestamp], map: "eth_token_transfers_2021_idx_timestamp")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model eth_token_transfers_2022 {
  timestamp         DateTime? @db.Timestamp(6)
  trx_hash          String?   @db.VarChar
  contract          String?   @db.VarChar
  from_address      String?   @db.VarChar
  to_address        String?   @db.VarChar
  token_id_or_value String?   @db.VarChar

  @@index([contract], map: "eth_token_transfers_2022_idx_contract")
  @@index([timestamp], map: "eth_token_transfers_2022_idx_timestamp")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model eth_token_transfers_2022_staging {
  timestamp         DateTime? @db.Timestamp(6)
  trx_hash          String?   @db.VarChar
  contract          String?   @db.VarChar
  from_address      String?   @db.VarChar
  to_address        String?   @db.VarChar
  token_id_or_value String?   @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model eth_transactions {
  timestamp    DateTime? @db.Timestamp(6)
  trx_hash     String    @db.VarChar(100)
  from_address String?   @db.VarChar(100)
  to_address   String?   @db.VarChar(100)
  eth_value    Decimal?  @db.Decimal

  @@index([timestamp], map: "eth_transactions_idx_timestamp")
  @@index([trx_hash], map: "eth_transactions_idx_trx_hash")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model export_blockie_top_collectors {
  address          String?  @db.VarChar
  address_rank     BigInt?
  total_worth      Decimal? @db.Decimal
  platform         String?  @db.VarChar(100)
  username         String?  @db.VarChar
  followers        Int?
  real_account     Boolean?
  verified_linkage Boolean?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model export_top_1k_vol_nft_collectors_instagram {
  instagram String? @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model export_top_1k_vol_nft_collectors_twitter {
  twitter String? @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model export_tribe_x_overlap {
  contract           String? @db.VarChar
  num_owners         BigInt?
  name               String? @db.VarChar
  description        String? @db.VarChar
  external_url       String? @db.VarChar
  twitter_username   String? @db.VarChar
  instagram_username String? @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model export_wallstreetfam {
  address                                 String?  @db.VarChar(100)
  discord                                 String?  @db.VarChar
  twitter                                 String?  @db.VarChar
  real_account                            Boolean?
  followers                               Int?
  total_worth                             Decimal? @db.Decimal
  top_collection_name                     String?  @db.VarChar
  top_collection_worth                    Decimal? @db.Decimal
  top_collection_num_tokens               BigInt?
  top_collection_worth_as_pct_total_worth Decimal? @db.Decimal
  top_collection_contract_address         String?  @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model export_wsf_top_1k_projects {
  twitter String? @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model export_wsf_utility_nft_buyers {
  username String? @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model export_wsf_utility_nft_buyers_instagram {
  username String? @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model first_acquisition {
  timestamp                          DateTime? @db.Timestamp(6)
  trx_hash                           String?   @db.VarChar
  contract                           String?   @db.VarChar
  token_id                           String?   @db.VarChar
  from_address                       String?   @db.VarChar
  to_address                         String?   @db.VarChar
  trade_platform                     String?   @db.VarChar
  trade_payment_token                String?   @db.VarChar
  num_tokens_in_the_same_transaction Int?
  price_per_token                    Decimal?  @db.Decimal
  action                             String?   @db.VarChar
  caller_is_receiver                 Boolean?

  @@unique([contract, to_address], map: "first_acquisition_idx_contract_to_address")
  @@index([to_address], map: "first_acquisition_idx_to_address")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model import_premint_xyz {
  wallet_address              String?   @db.VarChar
  ip_address_hash             String?   @db.VarChar
  discord_username            String?   @db.VarChar
  discord_id                  BigInt?
  twitter_username            String?   @db.VarChar
  twitter_id                  BigInt?
  create_time                 DateTime? @db.Timestamp(6)
  eth_balance_at_registration Decimal?  @db.Decimal
  collab                      String?   @db.VarChar
  custom_field                String?   @db.VarChar
  listname                    String?   @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model import_wallstreetfam {
  wallet_address              String?   @db.VarChar(100)
  ip_address_hash             String?   @db.VarChar(100)
  discord_username            String?   @db.VarChar(200)
  discord_id                  BigInt?
  twitter_username            String?   @db.VarChar(200)
  twitter_id                  BigInt?
  create_time                 DateTime? @db.Timestamp(6)
  eth_balance_at_registration Decimal?  @db.Decimal
  collab                      String?   @db.VarChar(200)
  custom_field                String?   @db.VarChar(200)

  @@ignore
}

model insider {
  id                               String                             @id @db.VarChar
  public_name_tag                  String?                            @db.VarChar
  opensea_display_name             String?                            @db.VarChar
  opensea_image_url                String?                            @db.VarChar
  opensea_banner_image_url         String?                            @db.VarChar
  opensea_bio                      String?                            @db.VarChar
  ens                              String?                            @db.VarChar
  twitter_username                 String?                            @db.VarChar
  instagram_username               String?                            @db.VarChar
  medium_username                  String?                            @db.VarChar
  email                            String?                            @db.VarChar
  website                          String?                            @db.VarChar
  opensea_user_created_at          DateTime?                          @db.Timestamp(6)
  last_updated_at                  DateTime?                          @db.Timestamp(6)
  insider_collection_ownership     insider_collection_ownership[]
  insider_past_90_days_trading_roi insider_past_90_days_trading_roi[]
  insider_portfolio                insider_portfolio[]
  insider_to_circle_mapping        insider_to_circle_mapping[]
  insight                          insight[]
  insight_trx                      insight_trx[]
}

model insider_collection_ownership {
  insider_id                String     @db.VarChar(100)
  collection_id             String     @db.VarChar(100)
  num_tokens                Int?
  oldest_token_collected_at DateTime?  @db.Timestamp(6)
  newest_token_collected_at DateTime?  @db.Timestamp(6)
  num_token_buy             Int?
  num_token_sell            Int?
  net_num_token_buy         Int?
  collection                collection @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  insider                   insider    @relation(fields: [insider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([insider_id, collection_id])
}

model insider_past_90_days_trading_roi {
  insider_id                        String     @db.VarChar(100)
  collection_id                     String     @db.VarChar(100)
  buy_date                          DateTime   @db.Date
  buy_eth_amount                    Decimal    @db.Decimal
  gain                              Decimal    @db.Decimal
  roi_pct                           Decimal    @db.Decimal
  collection_gain_rank_in_portfolio Int
  total_gain                        Decimal    @db.Decimal
  collection                        collection @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  insider                           insider    @relation(fields: [insider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([insider_id, collection_id], map: "insider_past_90_days_trading_roi_idx_address_contract")
  @@index([insider_id], map: "insider_past_90_days_trading_roi_idx_insider_id")
}

model insider_portfolio {
  insider_id                   String     @db.VarChar
  address_rank                 Int?
  collection_id                String     @db.VarChar
  num_tokens                   Int
  floor_price_in_eth           Decimal?   @db.Decimal
  collection_worth             Decimal?   @db.Decimal
  collection_rank_in_portfolio Int?
  total_worth                  Decimal?   @db.Decimal
  collection_pct_total         Decimal?   @db.Decimal
  collection                   collection @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  insider                      insider    @relation(fields: [insider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([insider_id, collection_id, num_tokens], map: "insider_portfolio_idx_unique")
}

model insider_to_circle_mapping {
  insider_id String   @db.VarChar
  owner_rank Int?
  circle_id  Int
  created_at DateTime @db.Date
  is_current Boolean
  circle     circle   @relation(fields: [circle_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  insider    insider  @relation(fields: [insider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([insider_id, circle_id, created_at], map: "insider_to_circle_mapping_unique_idx_insider_id_circle_id_creat")
  @@index([is_current], map: "insider_to_circle_mapping_idx_is_current")
}

model insight {
  insider_id                          String     @db.VarChar
  collection_id                       String     @db.VarChar
  action                              String     @db.VarChar
  num_tokens                          Int
  total_eth_amount                    Decimal    @db.Decimal
  last_traded_at                      DateTime   @db.Timestamp(6)
  num_tokens_owned                    Int
  insight_time_decay                  Decimal    @db.Decimal
  past_90_days_trading_gain           Decimal    @db.Decimal
  pct_trades_profitable               Decimal    @db.Decimal
  circle_collection_first_ts          DateTime   @db.Timestamp(6)
  insider_collection_first_ts         DateTime   @db.Timestamp(6)
  circle_collection_first_time_decay  Decimal    @db.Decimal
  insider_collection_first_time_decay Decimal    @db.Decimal
  feed_importance_score               Decimal    @db.Decimal
  collection                          collection @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  insider                             insider    @relation(fields: [insider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([insider_id, collection_id, action], map: "insight_unique_idx_insider_id_collection_id_action")
}

model insight_trx {
  date               DateTime   @db.Date
  insider_id         String     @db.VarChar(100)
  action             String     @db.VarChar(100)
  collection_id      String     @db.VarChar(100)
  floor_price_in_eth Decimal?   @db.Decimal
  num_tokens         Int
  total_eth_amount   Decimal    @db.Decimal
  collection         collection @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  insider            insider    @relation(fields: [insider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([date, insider_id, action, collection_id], map: "insight_trx_unique_idx")
}

model new_nft_contracts {
  address           String   @id @db.VarChar
  missing_metadata  Boolean?
  missing_trx_union Boolean?
}

model nft_contract_abi {
  address String  @id @db.VarChar
  abi     String? @db.VarChar
}

model nft_contract_floor_price {
  date               DateTime @db.Date
  contract           String   @db.VarChar
  floor_price_in_eth Decimal? @db.Decimal

  @@id([date, contract])
  @@index([contract, date], map: "nft_contract_floor_price_contract_date")
  @@index([date], map: "nft_contract_floor_price_idx_date")
}

model nft_ownership {
  contract            String     @db.VarChar
  token_id            String     @db.VarChar
  address             String?    @db.VarChar
  last_transferred_at DateTime?  @db.Timestamp(6)
  collection          collection @relation(fields: [contract], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_collection_id")

  @@id([contract, token_id])
  @@index([address], map: "nft_ownership_idx_address")
  @@index([contract], map: "nft_ownership_idx_contract")
  @@index([contract, token_id], map: "nft_ownership_idx_contract_token_id")
  @@index([address], map: "nft_ownership_idx_owner")
}

model nft_trades {
  timestamp     DateTime? @db.Timestamp(6)
  trx_hash      String    @id @db.VarChar
  eth_value     Decimal?  @db.Decimal
  payment_token String?   @db.VarChar
  price         Decimal?  @db.Decimal
  platform      String?   @db.VarChar(50)

  @@index([timestamp], map: "nft_trades_idx_timestamp")
  @@index([trx_hash], map: "nft_trades_idx_trx_hash")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model nft_trx_union {
  timestamp                          DateTime? @db.Timestamp(6)
  trx_hash                           String?   @db.VarChar
  contract                           String?   @db.VarChar
  token_id                           String?   @db.VarChar
  from_address                       String?   @db.VarChar
  to_address                         String?   @db.VarChar
  trade_platform                     String?   @db.VarChar
  trade_payment_token                String?   @db.VarChar
  num_tokens_in_the_same_transaction Int?
  price_per_token                    Decimal?  @db.Decimal
  action                             String?   @db.VarChar
  caller_is_receiver                 Boolean?

  @@index([contract], map: "nft_trx_union_idx_contract")
  @@index([timestamp], map: "nft_trx_union_idx_timestamp")
  @@ignore
}

model past_90_days_trading_roi {
  address                           String   @db.VarChar(100)
  contract                          String   @db.VarChar(100)
  buy_date                          DateTime @db.Date
  buy_eth_amount                    Decimal  @db.Decimal
  gain                              Decimal  @db.Decimal
  roi_pct                           Decimal  @db.Decimal
  collection_gain_rank_in_portfolio Int
  total_gain                        Decimal  @db.Decimal

  @@unique([address, contract], map: "past_90_days_trading_roi_idx_address_contract")
  @@index([address], map: "past_90_days_trading_roi_idx_address")
}

model post {
  id                    Int        @id @default(autoincrement())
  collection_id         String     @db.VarChar
  created_at            DateTime   @db.Date
  feed_importance_score Decimal    @db.Decimal
  collection            collection @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model subscriber {
  id    Int     @id @default(autoincrement())
  email String? @unique(map: "subscriber_unique_idx_email") @db.VarChar
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model trade_roi_flat {
  address                 String?   @db.VarChar
  buy_date                DateTime? @db.Date
  contract                String?   @db.VarChar
  token_id                String?   @db.VarChar
  buy_eth_amount          Decimal?  @db.Decimal
  acquisition_floor_price Decimal?  @db.Decimal
  sell_floor_price        Decimal?  @db.Decimal
  current_floor_price     Decimal?  @db.Decimal
  gain                    Decimal?  @db.Decimal

  @@index([address], map: "trade_roi_flat_idx_address")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model trx_with_floor_price {
  to_address         String?   @db.VarChar
  from_address       String?   @db.VarChar
  date               DateTime? @db.Date
  contract           String?   @db.VarChar
  token_id           String?   @db.VarChar
  price_per_token    Decimal?  @db.Decimal
  floor_price_in_eth Decimal?  @db.Decimal

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model upload_twitter_profile {
  twitter_username String?   @unique(map: "upload_twitter_profile_idx_twitter_username") @db.VarChar
  verified         Boolean?
  followers        String?   @db.VarChar
  last_verified_at DateTime? @db.Timestamp(6)

  @@ignore
}

model user_profile {
  id                                                               Int                                  @id @default(autoincrement())
  handle                                                           String                               @unique(map: "user_profile_unique_idx_handle") @db.VarChar
  profile_name                                                     String                               @db.VarChar
  profile_picture                                                  String?                              @db.VarChar
  email                                                            String                               @unique(map: "user_profile_unique_idx_email") @db.VarChar
  twitter                                                          String?                              @db.VarChar
  linkedin                                                         String?                              @db.VarChar
  bio_short                                                        String?                              @db.VarChar
  bio                                                              String?                              @db.VarChar
  label_hiring                                                     Boolean?
  label_open_to_work                                               Boolean?
  label_open_to_cofounder_matching                                 Boolean?
  label_need_product_feedback                                      Boolean?
  label_open_to_discover_new_project                               Boolean?
  label_fundraising                                                Boolean?
  label_open_to_invest                                             Boolean?
  label_on_core_team                                               Boolean?
  label_text_hiring                                                String?                              @db.VarChar
  label_text_open_to_work                                          String?                              @db.VarChar
  label_text_open_to_discover_new_project                          String?                              @db.VarChar
  skill_founder                                                    Boolean?
  skill_web3_domain_expert                                         Boolean?
  skill_artist                                                     Boolean?
  skill_frontend_eng                                               Boolean?
  skill_backend_eng                                                Boolean?
  skill_fullstack_eng                                              Boolean?
  skill_blockchain_eng                                             Boolean?
  skill_data_eng                                                   Boolean?
  skill_data_science                                               Boolean?
  skill_hareware_dev                                               Boolean?
  skill_game_dev                                                   Boolean?
  skill_dev_ops                                                    Boolean?
  skill_product_manager                                            Boolean?
  skill_product_designer                                           Boolean?
  skill_token_designer                                             Boolean?
  skill_technical_writer                                           Boolean?
  skill_social_media_influencer                                    Boolean?
  skill_i_bring_capital                                            Boolean?
  skill_community_manager                                          Boolean?
  skill_marketing_growth                                           Boolean?
  skill_business_development                                       Boolean?
  skill_developer_relations                                        Boolean?
  skill_influencer_relations                                       Boolean?
  skill_investor_relations                                         Boolean?
  resume                                                           String?                              @db.VarChar
  User                                                             User                                 @relation(fields: [email], references: [email], onDelete: NoAction, onUpdate: NoAction)
  connection_connection_user_profile_endTouser_profile             connection[]                         @relation("connection_user_profile_endTouser_profile")
  connection_connection_user_profile_startTouser_profile           connection[]                         @relation("connection_user_profile_startTouser_profile")
  connection_request_connection_request_initiator_idTouser_profile connection_request[]                 @relation("connection_request_initiator_idTouser_profile")
  connection_request_connection_request_requested_idTouser_profile connection_request[]                 @relation("connection_request_requested_idTouser_profile")
  user_profile_to_conference_mapping                               user_profile_to_conference_mapping[]
}

model user_profile_to_conference_mapping {
  user_profile_id Int
  conference_id   Int
  conference      conference   @relation(fields: [conference_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_profile    user_profile @relation(fields: [user_profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_profile_id, conference_id], map: "user_profile_to_conference_mapping_idx_user_profile_id_conferen")
}

model connection_request {
  initiator_id                                               Int
  requested_id                                               Int
  invitation_message                                         String?      @db.VarChar
  created_at                                                 DateTime     @db.Timestamp(6)
  confirmed_at                                               DateTime?    @db.Timestamp(6)
  rejected_at                                                DateTime?    @db.Timestamp(6)
  user_profile_connection_request_initiator_idTouser_profile user_profile @relation("connection_request_initiator_idTouser_profile", fields: [initiator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_profile_connection_request_requested_idTouser_profile user_profile @relation("connection_request_requested_idTouser_profile", fields: [requested_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([initiator_id, requested_id], map: "connection_request_idx_initiator_id_requested_id")
}

model connection {
  user_profile_start                                       Int
  user_profile_end                                         Int
  created_at                                               DateTime     @db.Timestamp(6)
  user_profile_connection_user_profile_endTouser_profile   user_profile @relation("connection_user_profile_endTouser_profile", fields: [user_profile_end], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_profile_connection_user_profile_startTouser_profile user_profile @relation("connection_user_profile_startTouser_profile", fields: [user_profile_start], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_profile_start, user_profile_end], map: "connection_idx_user_profiles")
  @@index([user_profile_start], map: "connection_idx_user_profile_start")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model tmp {
  id              Int?
  year            Int?
  conference_name String?   @db.VarChar
  location        String?   @db.VarChar
  start_date      DateTime? @db.Date
  end_date        DateTime? @db.Date

  @@ignore
}
